// biome-ignore-all lint/suspicious/noExplicitAny: This is a type definition, so any type is acceptable here.
/**
 * Message interface for the message provider
 * @template T - The type of the message data
 */
export type Message<T = any> = {
	/**
	 * Unique identifier for the message
	 * @type {string}
	 */
	id: string;
	/**
	 * the provider that passed the message
	 */
	providerId?: string;
	/**
	 * The data of the message
	 * @type {<T = any>}
	 */
	data: T;
	/**
	 * Timestamp of when the message was created
	 * @type {number}
	 */
	timestamp?: number;
	/**
	 * Headers for additional metadata
	 * @type {Record<string, string>}
	 */
	headers?: Record<string, string>;
};

export type TopicHandler = {
	id?: string;
	handler: (message: Message) => Promise<void>;
};

/**
 * MessageProvider interface for the message provider
 */
export type MessageProvider = {
	/**
	 * The id of the message provider. Use primary when multiple providers
	 * are used.
	 */
	id: string;

	/**
	 * Array of handlers for message processing
	 * @type {Map<string, Array<TopicHandler>>}
	 */
	subscriptions: Map<string, TopicHandler[]>;

	/**
	 * Plublish a message to a topic / queue. This is used to send messages to subscribers.
	 * @param topic - The topic or queue to publish the message to
	 * @param message - The message to be published
	 * @returns {Promise<void>}
	 */
	publish(topic: string, message: Omit<Message, "providerId">): Promise<void>;

	/**
	 * Subscribe to a topic / queue. This is used to receive messages from the provider.
	 * @param {TopicHandler} subscription - The topic or queue to subscribe to
	 * @returns {Promise<void>}
	 */
	subscribe(topic: string, handler: TopicHandler): Promise<void>;

	/**
	 * Remove subscription to a topic / queue.
	 * @param topic - The topic or queue to unsubscribe from
	 * @param id - Optional unique identifier for the subscription to remove. If not provided, it will remove all subscriptions for the topic.
	 * @returns {Promise<void>}
	 */
	unsubscribe(topic: string, id?: string): Promise<void>;

	/**
	 * Unsubscribe from a topic / queue. This is used to stop receiving messages from the provider.
	 * @returns {Promise<void>}
	 */
	disconnect(): Promise<void>;
};

/**
 * Task interface for the task provider
 * @template T - The type of the task data
 */
export type Task<T = any> = {
	/**
	 * Unique identifier for the task
	 * @type {string}
	 */
	id: string;
	/**
	 * The data of the task
	 * @type {<T = any>}
	 */
	data: T;
	/**
	 * Timestamp of when the task was created (milliseconds since epoch)
	 * Set automatically by provider if not provided based on Date.now()
	 * @type {number}
	 */
	timestamp?: number;

	/**
	 * Scheduled time for delayed task execution (milliseconds since epoch)
	 * If set, task won't be processed until this time
	 * @type {number}
	 */
	scheduledAt?: number;

	/**
	 * Headers for additional metadata
	 * @type {Record<string, string>}
	 */
	headers?: Record<string, string>;

	/**
	 * Priority of the task (higher numbers = higher priority)
	 * @type {number}
	 * @default 0
	 */
	priority?: number;

	/**
	 * Maximum number of retry attempts
	 * If undefined, uses provider default
	 * @type {number}
	 */
	maxRetries?: number;

	/**
	 * Maximum processing time in milliseconds before task times out
	 * If not set, uses provider default
	 * @type {number}
	 */
	timeout?: number;
};

/**
 * Task type for enqueueing tasks
 * Omits fields that are automatically generated by the provider
 * The provider will assign the id and timestamp when the task is enqueued
 */
export type EnqueueTask = Omit<Task, "id" | "timestamp">;

/**
 * Context provided to task handlers for acknowledgment and task control
 * Allows handlers to acknowledge, reject, or extend processing time for tasks
 */
export type TaskContext = {
	/**
	 * Acknowledge successful task completion
	 * Removes the task from the queue and marks it as completed
	 * @returns {Promise<void>}
	 */
	ack: () => Promise<void>;

	/**
	 * Reject the task with explicit requeue control
	 * @param requeue - If true, requeue for retry. If false, send to dead-letter queue. Defaults to true.
	 * @returns {Promise<void>}
	 */
	reject: (requeue?: boolean) => Promise<void>;

	/**
	 * Extend the visibility timeout / processing deadline
	 * Prevents task from being redelivered to another consumer while still processing
	 * Useful for long-running tasks that need more time
	 * @param ttl - Additional time to live in milliseconds
	 * @returns {Promise<void>}
	 */
	extend: (ttl: number) => Promise<void>;

	/**
	 * Metadata about the current task execution
	 * Provides context for retry logic and deadline management
	 */
	metadata: {
		/**
		 * Current retry attempt (0 = first attempt)
		 * @type {number}
		 */
		attempt: number;

		/**
		 * Maximum retries allowed for this task
		 * @type {number}
		 */
		maxRetries: number;
	};
};

/**
 * Handler configuration for processing tasks from a queue
 * Defines how tasks should be processed and provides options for error handling
 */
export type TaskHandler = {
	/**
	 * Optional unique identifier for this handler
	 * Used to identify and unsubscribe specific handlers
	 * @type {string}
	 */
	id?: string;

	/**
	 * The handler function to process tasks
	 * Called for each task dequeued from the queue
	 * @param task - The task to process
	 * @param context - Context for acknowledging, rejecting, or extending the task
	 * @returns {Promise<void>}
	 */
	handler: (task: Task, context: TaskContext) => Promise<void>;
};

/**
 * Configuration options for task providers
 * Allows customization of default behavior for task processing
 */
export type TaskProviderOptions = {
	/**
	 * Default timeout for task processing in milliseconds
	 * Tasks exceeding this duration may be requeued or marked as failed
	 * @type {number}
	 */
	timeout?: number;

	/**
	 * Default maximum number of retry attempts for failed tasks
	 * After this many failures, tasks may be sent to dead-letter queue
	 * @type {number}
	 */
	retries?: number;
};

/**
 * TaskProvider interface for task queue management
 * Handles enqueueing, dequeueing, and lifecycle management of tasks
 * Implementations should provide reliable task delivery and acknowledgment
 */
export type TaskProvider = {
	/**
	 * Unique identifier for this provider instance
	 * Used to distinguish between multiple providers
	 * @type {string}
	 */
	id: string;

	/**
	 * Default timeout for task processing in milliseconds
	 * Can be overridden per task or per handler
	 * @type {number}
	 */
	timeout: number;

	/**
	 * Default maximum number of retry attempts
	 * Can be overridden per task
	 * @type {number}
	 */
	retries: number;

	/**
	 * Map of queue names to their registered handlers
	 * Tracks all active handlers for each queue
	 * @type {Map<string, TaskHandler[]>}
	 */
	taskHandlers: Map<string, TaskHandler[]>;

	/**
	 * Enqueue a task to a specific queue for processing
	 * The task will be delivered to registered handlers for that queue
	 * @param queue - The queue name to enqueue the task to
	 * @param task - The task to be enqueued
	 * @returns {Promise<string>} - the id of the task being queued
	 */
	enqueue(queue: string, task: EnqueueTask): Promise<string>;

	/**
	 * Register a handler to process tasks from a specific queue
	 * The handler will be called for each task dequeued from the queue
	 * @param queue - The queue name to dequeue tasks from
	 * @param handler - The handler configuration for processing tasks
	 * @returns {Promise<void>}
	 */
	dequeue(queue: string, handler: TaskHandler): Promise<void>;

	/**
	 * Unsubscribe a handler from a queue
	 * Stops the handler from receiving new tasks
	 * @param queue - The queue name to unsubscribe from
	 * @param id - Optional handler ID. If not provided, removes all handlers for the queue
	 * @returns {Promise<void>}
	 */
	unsubscribe(queue: string, id?: string): Promise<void>;

	/**
	 * Disconnect and clean up the provider
	 * Stops receiving tasks, closes connections, and releases resources
	 * Should be called before application shutdown
	 * @returns {Promise<void>}
	 */
	disconnect(): Promise<void>;
};
